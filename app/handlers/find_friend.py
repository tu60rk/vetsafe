
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, IDFilter
from aiogram.dispatcher.filters.state import State, StatesGroup
from app.utils.buttons import start_find_animal, create_main_menu, create_pet_types, create_pet_gender, animal_age
from app.utils import check_user
from app.utils.bd import DataBase

db = DataBase()

class FindFriend(StatesGroup):
    choose_path = State()
    choose_animal_type = State()
    choose_animal_gender = State()
    choose_animal_breed = State()
    choose_animal_age = State()
    input_user_telephone = State()

async def start_find_friend(message: types.Message, state: FSMContext):
    await message.answer("""–ù–∞–π–¥–µ–º –∏ –ø–æ–¥–±–µ—Ä–µ–º –¥–æ—Å—Ç–æ–π–Ω—ã–π –ø—Ä–∏—é—Ç –∏–ª–∏ –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ–≥–æ –∑–∞–≤–æ–¥—á–∏–∫–∞!
–û—Å–º–æ—Ç—Ä –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–º –≤—Ä–∞—á–æ–º —É –∑–∞–≤–æ–¥—á–∏–∫–∞ –∏–ª–∏ –≤ –ø—Ä–∏—é—Ç–µ –ø–µ—Ä–µ–¥ –≤–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–µ–π —Å –Ω–æ–≤—ã–º –¥—Ä—É–≥–æ–º!
–ü–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!

–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:""", reply_markup=start_find_animal())

    await FindFriend.choose_path.set()


async def choose_path(message: types.Message, state: FSMContext):
    if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É':
        await message.answer('–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ?', reply_markup=create_pet_types(for_find_friend=True))
        await FindFriend.next()
    elif message.text == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –≤–æ–ø—Ä–æ—Å @alanasanov", reply_markup=start_find_animal())
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.", reply_markup=start_find_animal())
        return


async def choose_animal_type(message: types.Message, state: FSMContext):
    if message.text in ['–ö–æ—à–∫–∞', "–°–æ–±–∞–∫–∞"]:
        await state.update_data(animal_type = message.text)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø–æ–ª –∂–∏–≤–æ—Ç–Ω–æ–≥–æ', reply_markup=create_pet_gender(for_find_friend=True))
        await FindFriend.next()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.', reply_markup=create_pet_types(for_find_friend=True))
        return

async def choose_animal_gender(message: types.Message, state: FSMContext):
    gender_format = {
        '–ú—É–∂—Å–∫–æ–π' : '–º—É–∂',
        '–ñ–µ–Ω—Å–∫–∏–π' : '–∂–µ–Ω',
        '–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è' : '–Ω–∑',
    }

    if message.text in ['–ú—É–∂—Å–∫–æ–π', "–ñ–µ–Ω—Å–∫–∏–π", "–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"]:
        await state.update_data(animal_gender = gender_format.get(message.text))
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø–æ—Ä–æ–¥—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        await FindFriend.next()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø–æ–ª –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.', reply_markup=create_pet_gender(for_find_friend=True))
        return

async def choose_animal_breed(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await state.update_data(animal_breed = message.text)
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∂–∏–≤–æ—Ç–Ω–æ–≥–æ', reply_markup=animal_age())
        await FindFriend.next()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥. –ü–æ—Ä–æ–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã!', reply_markup=types.ReplyKeyboardRemove())
        return

async def choose_animal_age(message: types.Message, state: FSMContext):
    return_ans = {
        "–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è" : "–Ω–∑"
    }

    if message.text in ['–î–æ –≥–æ–¥–∞', "–û—Ç –≥–æ–¥–∞", "–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"]:
        req_id = await db.get_max_req_id() + 1
        create_datetime = datetime.now()

        await state.update_data(animal_age = return_ans.get(message.text, message.text))
        await state.update_data(create_datetime = create_datetime)
        await state.update_data(req_id = req_id)
        await state.update_data(user_id = message.from_user.id)
        await state.update_data(user_nik = message.from_user.username)
        data_for_statuses = {
                'req_id' : req_id , 
                'req_status': '–æ–∂–∏–¥–∞–Ω–∏–µ',
                'req_datetime': create_datetime, 
                'req_comment': None, 
                'req_schedule_datetime': None
            }

        await state.update_data(data_for_statuses = data_for_statuses)

        flag, telephone_number, chat_id, code = check_user.check_user_on_his_id(
            message.from_user.id
        )
        if flag:
            await state.update_data(user_telephone = check_user.get_int_phone(telephone_number))
            await db.insert_requests_statuses(data = data_for_statuses)
            await db.insert_requests(data = await state.get_data())
            await message.answer('–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏!', reply_markup=create_main_menu(message.from_user.id))
            await state.finish()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (79152304433)', reply_markup=types.ReplyKeyboardRemove())
            await FindFriend.next()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ', reply_markup=animal_age())
        return

async def input_user_telephone(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or len(message.text) != 11:
        await message.answer(
            "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–æ–º–µ—Ä. –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 11 —Ü–∏—Ñ—Ä (79152304433). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    await state.update_data(user_telephone = message.text)
    await db.insert_requests_statuses(data = await state.get_data().get('data_for_statuses'))
    await db.insert_requests(data = await state.get_data())
    await message.answer('–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏!', reply_markup=create_main_menu(message.from_user.id))
    await state.finish()

    
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_main_menu(message.from_user.id))

def register_handlers_find_friends(dp: Dispatcher) -> None:

    dp.register_message_handler(
        cancel,
        Text(equals=["–æ—Ç–º–µ–Ω–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"], ignore_case=True),
        state="*",
    )
    dp.register_message_handler(
            start_find_friend, Text(equals="–•–æ—á—É –∑–∞–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–∞ üê±üê∂", ignore_case=True), state="*"
        )

    dp.register_message_handler(choose_path, state=FindFriend.choose_path)
    dp.register_message_handler(choose_animal_type, state=FindFriend.choose_animal_type)
    dp.register_message_handler(choose_animal_gender, state=FindFriend.choose_animal_gender)
    dp.register_message_handler(choose_animal_breed, state=FindFriend.choose_animal_breed)
    dp.register_message_handler(choose_animal_age, state=FindFriend.choose_animal_age)
    dp.register_message_handler(input_user_telephone, state=FindFriend.input_user_telephone)