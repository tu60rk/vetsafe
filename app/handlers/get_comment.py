import os
import re

from datetime import datetime
from aiogram import Bot
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from app.utils.buttons import (
    create_main_menu,
    create_stars,
    create_go_yes_no,
    create_start_comment,
)
from app.utils.bd import DataBase

db = DataBase()

TOKEN = os.getenv("BOT_TOKEN")
bot_ = Bot(token=TOKEN)


class Comments(StatesGroup):

    binary_answer = State()
    start_answer = State()
    get_comment = State()


async def start_push_vaccin(chat_id: int) -> None:
    txt = "*–í–ï–¢–°–ï–ô–§ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∫–ª–∏–Ω–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä –∫–ª–∏–Ω–∏–∫—É —Å –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–æ–π*"
    await bot_.send_message(chat_id, txt)


async def start_push_chip(chat_id: int) -> None:
    txt = "–ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–ª–∏–Ω–∏–∫—É –¥–ª—è —á–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ü–µ–Ω—É"
    await bot_.send_message(chat_id, txt)


async def start_push_comment(chat_id: int) -> None:
    txt = "–í—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–∫–∏–¥–∫—É VETSAFE - —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–ª–æ!"
    await bot_.send_message(chat_id, txt, reply_markup=create_start_comment())


async def get_push(message: types.Message) -> None:
    await message.answer("–í—ã –ø–æ—Å–µ—Ç–∏–ª–∏ –í–µ—Ç –ö–ª–∏–Ω–∏–∫—É?", reply_markup=create_go_yes_no())
    await Comments.binary_answer.set()

async def start_push_alan(chat_id: int, for_wait:int, for_process:int) -> None:
    txt = ''
    if for_wait:
        txt = f"–ê–ª–∞–Ω! –£ —Ç–µ–±—è –∑–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è {for_wait} —à—Ç—É–∫."
    if for_process:
        txt = f"–ê–ª–∞–Ω! –£ —Ç–µ–±—è –∑–∞—è–≤–æ–∫ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ø–æ–¥–æ—à–µ–ª —Å—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è {for_process} —à—Ç—É–∫."
    await bot_.send_message(chat_id, txt)


async def check_binary_answer(message: types.Message, state: FSMContext) -> None:
    if not message.text in ["–î–∞, –ø–æ—Å–µ—â–∞–ª üî•", "–ù–µ—Ç, –Ω–µ –ø–æ—Å–µ—â–∞–ª üòî"]:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞, –ø–æ—Å–µ—â–∞–ª üî•' –∏–ª–∏ '–ù–µ—Ç, –Ω–µ –ø–æ—Å–µ—â–∞–ª üòî'.",
            reply_markup=create_go_yes_no(),
        )
        return

    if message.text == "–ù–µ—Ç, –Ω–µ –ø–æ—Å–µ—â–∞–ª üòî":
        mxid = await db.get_df("select max(id) as mxid from comments", columns=["mxid"])
        data = [
            {
                "mxid": int(mxid.mxid.max() + 1),
                "chat_id": int(message.chat.id),
                "go_hospital": "–Ω–µ—Ç",
                "quality": 0,
                "comment": "–Ω–µ—Ç",
                "date": datetime.now().strftime("%Y%m%d %H%M"),
            }
        ]
        await db.insert_any_data(
            "insert into comments values(:mxid, :chat_id, :go_hospital, :quality, :comment, :date)",
            data,
        )
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–≤–µ—Ç!", reply_markup=create_main_menu(message.from_user.id)
        )
        await state.finish()

    if message.text == "–î–∞, –ø–æ—Å–µ—â–∞–ª üî•":
        await state.update_data(go_hospital="–¥–∞")
        await Comments.next()
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ (–ß—Ç–æ?)", reply_markup=create_stars())


async def check_stars(message: types.Message, state: FSMContext) -> None:
    if not "‚≠êÔ∏è" in message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ‚≠êÔ∏è", reply_markup=create_stars())
        return

    await state.update_data(quality=len(re.findall("‚≠êÔ∏è", message.text)))
    await Comments.next()
    await message.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤, —ç—Ç–æ —É–ª—É—á—à–∏—Ç –Ω–∞—à—É —Ä–∞–±–æ—Ç—É",
        reply_markup=types.ReplyKeyboardRemove(),
    )


async def get_comment(message: types.Message, state: FSMContext) -> None:
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=create_main_menu(message.from_user.id)
    )
    await state.update_data(comment=message.text)

    currect_data = await state.get_data()
    mxid = await db.get_df("select max(id) as mxid from comments", columns=["mxid"])
    data = [
        {
            "mxid": int(mxid.mxid.max() + 1),
            "chat_id": int(message.chat.id),
            "go_hospital": currect_data["go_hospital"],
            "quality": currect_data["quality"],
            "comment": currect_data["comment"],
            "date": datetime.now().strftime("%Y%m%d %H%M"),
        }
    ]
    await db.insert_any_data(
        "insert into comments values(:mxid, :chat_id, :go_hospital, :quality, :comment, :date)",
        data,
    )
    await state.finish()


async def return_main_menu(message: types.Message, state: FSMContext) -> None:
    await state.finish()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ",
        reply_markup=create_main_menu(message.from_user.id),
    )


def register_handlers_get_comment(dp: Dispatcher):
    dp.message_handler(start_push_comment)
    dp.register_message_handler(
        return_main_menu,
        Text(equals="–ù–µ —Ö–æ—á—É —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å :(", ignore_case=True),
        state="*",
    )
    dp.register_message_handler(
        get_push, Text(equals="–†–∞—Å—Å–∫–∞–∑–∞—Ç—å!", ignore_case=True), state="*"
    )
    dp.register_message_handler(check_binary_answer, state=Comments.binary_answer)
    dp.register_message_handler(check_stars, state=Comments.start_answer)
    dp.register_message_handler(get_comment, state=Comments.get_comment)
